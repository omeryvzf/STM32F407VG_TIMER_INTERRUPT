
timer_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000324  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004ac  080004b4  000104b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080004ac  080004ac  000104ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080004b0  080004b0  000104b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000104b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000104b4  2**0
                  CONTENTS
  7 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000001c  2000001c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000104b4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000323c  00000000  00000000  000104e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000006a8  00000000  00000000  00013720  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000470  00000000  00000000  00013dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000418  00000000  00000000  00014238  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001542  00000000  00000000  00014650  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001904  00000000  00000000  00015b92  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00017496  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000012d4  00000000  00000000  00017514  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000187e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000494 	.word	0x08000494

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000494 	.word	0x08000494

080001c8 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	695a      	ldr	r2, [r3, #20]
 80001d8:	887b      	ldrh	r3, [r7, #2]
 80001da:	405a      	eors	r2, r3
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	615a      	str	r2, [r3, #20]
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr

080001ec <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	460b      	mov	r3, r1
 80001f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80001f8:	887b      	ldrh	r3, [r7, #2]
 80001fa:	43db      	mvns	r3, r3
 80001fc:	b29a      	uxth	r2, r3
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	821a      	strh	r2, [r3, #16]
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
	...

08000210 <TIM3_IRQHandler>:



}

void TIM3_IRQHandler(){
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	GPIO_ToggleBits(GPIOB,GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_2);
 8000214:	2107      	movs	r1, #7
 8000216:	4804      	ldr	r0, [pc, #16]	; (8000228 <TIM3_IRQHandler+0x18>)
 8000218:	f7ff ffd6 	bl	80001c8 <GPIO_ToggleBits>
	TIM_ClearITPendingBit(TIM3,TIM_IT_Update);
 800021c:	2101      	movs	r1, #1
 800021e:	4803      	ldr	r0, [pc, #12]	; (800022c <TIM3_IRQHandler+0x1c>)
 8000220:	f7ff ffe4 	bl	80001ec <TIM_ClearITPendingBit>

}
 8000224:	bf00      	nop
 8000226:	bd80      	pop	{r7, pc}
 8000228:	40020400 	.word	0x40020400
 800022c:	40000400 	.word	0x40000400

08000230 <main>:

int main(void){
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0



  while (1){
 8000234:	e7fe      	b.n	8000234 <main+0x4>
	...

08000238 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000238:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000270 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800023c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800023e:	e003      	b.n	8000248 <LoopCopyDataInit>

08000240 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000240:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000242:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000244:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000246:	3104      	adds	r1, #4

08000248 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000248:	480b      	ldr	r0, [pc, #44]	; (8000278 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800024a:	4b0c      	ldr	r3, [pc, #48]	; (800027c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800024c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800024e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000250:	d3f6      	bcc.n	8000240 <CopyDataInit>
  ldr  r2, =_sbss
 8000252:	4a0b      	ldr	r2, [pc, #44]	; (8000280 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000254:	e002      	b.n	800025c <LoopFillZerobss>

08000256 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000256:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000258:	f842 3b04 	str.w	r3, [r2], #4

0800025c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800025c:	4b09      	ldr	r3, [pc, #36]	; (8000284 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800025e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000260:	d3f9      	bcc.n	8000256 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000262:	f000 f841 	bl	80002e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000266:	f000 f8f1 	bl	800044c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800026a:	f7ff ffe1 	bl	8000230 <main>
  bx  lr    
 800026e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000270:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000274:	080004b4 	.word	0x080004b4
  ldr  r0, =_sdata
 8000278:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800027c:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000280:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000284:	2000001c 	.word	0x2000001c

08000288 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000288:	e7fe      	b.n	8000288 <ADC_IRQHandler>

0800028a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800028a:	b480      	push	{r7}
 800028c:	af00      	add	r7, sp, #0
}
 800028e:	bf00      	nop
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr

08000298 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800029c:	e7fe      	b.n	800029c <HardFault_Handler+0x4>

0800029e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800029e:	b480      	push	{r7}
 80002a0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80002a2:	e7fe      	b.n	80002a2 <MemManage_Handler+0x4>

080002a4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80002a8:	e7fe      	b.n	80002a8 <BusFault_Handler+0x4>

080002aa <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80002aa:	b480      	push	{r7}
 80002ac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80002ae:	e7fe      	b.n	80002ae <UsageFault_Handler+0x4>

080002b0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr

080002be <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80002be:	b480      	push	{r7}
 80002c0:	af00      	add	r7, sp, #0
}
 80002c2:	bf00      	nop
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
}
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr

080002da <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80002da:	b480      	push	{r7}
 80002dc:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80002de:	bf00      	nop
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002ec:	4a16      	ldr	r2, [pc, #88]	; (8000348 <SystemInit+0x60>)
 80002ee:	4b16      	ldr	r3, [pc, #88]	; (8000348 <SystemInit+0x60>)
 80002f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002fc:	4a13      	ldr	r2, [pc, #76]	; (800034c <SystemInit+0x64>)
 80002fe:	4b13      	ldr	r3, [pc, #76]	; (800034c <SystemInit+0x64>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000308:	4b10      	ldr	r3, [pc, #64]	; (800034c <SystemInit+0x64>)
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800030e:	4a0f      	ldr	r2, [pc, #60]	; (800034c <SystemInit+0x64>)
 8000310:	4b0e      	ldr	r3, [pc, #56]	; (800034c <SystemInit+0x64>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800031c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800031e:	4b0b      	ldr	r3, [pc, #44]	; (800034c <SystemInit+0x64>)
 8000320:	4a0b      	ldr	r2, [pc, #44]	; (8000350 <SystemInit+0x68>)
 8000322:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000324:	4a09      	ldr	r2, [pc, #36]	; (800034c <SystemInit+0x64>)
 8000326:	4b09      	ldr	r3, [pc, #36]	; (800034c <SystemInit+0x64>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800032e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <SystemInit+0x64>)
 8000332:	2200      	movs	r2, #0
 8000334:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000336:	f000 f80d 	bl	8000354 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800033a:	4b03      	ldr	r3, [pc, #12]	; (8000348 <SystemInit+0x60>)
 800033c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000340:	609a      	str	r2, [r3, #8]
#endif
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	e000ed00 	.word	0xe000ed00
 800034c:	40023800 	.word	0x40023800
 8000350:	24003010 	.word	0x24003010

08000354 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800035a:	2300      	movs	r3, #0
 800035c:	607b      	str	r3, [r7, #4]
 800035e:	2300      	movs	r3, #0
 8000360:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000362:	4a36      	ldr	r2, [pc, #216]	; (800043c <SetSysClock+0xe8>)
 8000364:	4b35      	ldr	r3, [pc, #212]	; (800043c <SetSysClock+0xe8>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800036c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800036e:	4b33      	ldr	r3, [pc, #204]	; (800043c <SetSysClock+0xe8>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000376:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3301      	adds	r3, #1
 800037c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d103      	bne.n	800038c <SetSysClock+0x38>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800038a:	d1f0      	bne.n	800036e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800038c:	4b2b      	ldr	r3, [pc, #172]	; (800043c <SetSysClock+0xe8>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000394:	2b00      	cmp	r3, #0
 8000396:	d002      	beq.n	800039e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000398:	2301      	movs	r3, #1
 800039a:	603b      	str	r3, [r7, #0]
 800039c:	e001      	b.n	80003a2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800039e:	2300      	movs	r3, #0
 80003a0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d142      	bne.n	800042e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003a8:	4a24      	ldr	r2, [pc, #144]	; (800043c <SetSysClock+0xe8>)
 80003aa:	4b24      	ldr	r3, [pc, #144]	; (800043c <SetSysClock+0xe8>)
 80003ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80003b4:	4a22      	ldr	r2, [pc, #136]	; (8000440 <SetSysClock+0xec>)
 80003b6:	4b22      	ldr	r3, [pc, #136]	; (8000440 <SetSysClock+0xec>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80003be:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80003c0:	4a1e      	ldr	r2, [pc, #120]	; (800043c <SetSysClock+0xe8>)
 80003c2:	4b1e      	ldr	r3, [pc, #120]	; (800043c <SetSysClock+0xe8>)
 80003c4:	689b      	ldr	r3, [r3, #8]
 80003c6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80003c8:	4a1c      	ldr	r2, [pc, #112]	; (800043c <SetSysClock+0xe8>)
 80003ca:	4b1c      	ldr	r3, [pc, #112]	; (800043c <SetSysClock+0xe8>)
 80003cc:	689b      	ldr	r3, [r3, #8]
 80003ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003d2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80003d4:	4a19      	ldr	r2, [pc, #100]	; (800043c <SetSysClock+0xe8>)
 80003d6:	4b19      	ldr	r3, [pc, #100]	; (800043c <SetSysClock+0xe8>)
 80003d8:	689b      	ldr	r3, [r3, #8]
 80003da:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80003de:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80003e0:	4b16      	ldr	r3, [pc, #88]	; (800043c <SetSysClock+0xe8>)
 80003e2:	4a18      	ldr	r2, [pc, #96]	; (8000444 <SetSysClock+0xf0>)
 80003e4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80003e6:	4a15      	ldr	r2, [pc, #84]	; (800043c <SetSysClock+0xe8>)
 80003e8:	4b14      	ldr	r3, [pc, #80]	; (800043c <SetSysClock+0xe8>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003f0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80003f2:	bf00      	nop
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <SetSysClock+0xe8>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d0f9      	beq.n	80003f4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000400:	4b11      	ldr	r3, [pc, #68]	; (8000448 <SetSysClock+0xf4>)
 8000402:	f240 7205 	movw	r2, #1797	; 0x705
 8000406:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000408:	4a0c      	ldr	r2, [pc, #48]	; (800043c <SetSysClock+0xe8>)
 800040a:	4b0c      	ldr	r3, [pc, #48]	; (800043c <SetSysClock+0xe8>)
 800040c:	689b      	ldr	r3, [r3, #8]
 800040e:	f023 0303 	bic.w	r3, r3, #3
 8000412:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000414:	4a09      	ldr	r2, [pc, #36]	; (800043c <SetSysClock+0xe8>)
 8000416:	4b09      	ldr	r3, [pc, #36]	; (800043c <SetSysClock+0xe8>)
 8000418:	689b      	ldr	r3, [r3, #8]
 800041a:	f043 0302 	orr.w	r3, r3, #2
 800041e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000420:	bf00      	nop
 8000422:	4b06      	ldr	r3, [pc, #24]	; (800043c <SetSysClock+0xe8>)
 8000424:	689b      	ldr	r3, [r3, #8]
 8000426:	f003 030c 	and.w	r3, r3, #12
 800042a:	2b08      	cmp	r3, #8
 800042c:	d1f9      	bne.n	8000422 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40023800 	.word	0x40023800
 8000440:	40007000 	.word	0x40007000
 8000444:	07405419 	.word	0x07405419
 8000448:	40023c00 	.word	0x40023c00

0800044c <__libc_init_array>:
 800044c:	b570      	push	{r4, r5, r6, lr}
 800044e:	4e0d      	ldr	r6, [pc, #52]	; (8000484 <__libc_init_array+0x38>)
 8000450:	4c0d      	ldr	r4, [pc, #52]	; (8000488 <__libc_init_array+0x3c>)
 8000452:	1ba4      	subs	r4, r4, r6
 8000454:	10a4      	asrs	r4, r4, #2
 8000456:	2500      	movs	r5, #0
 8000458:	42a5      	cmp	r5, r4
 800045a:	d109      	bne.n	8000470 <__libc_init_array+0x24>
 800045c:	4e0b      	ldr	r6, [pc, #44]	; (800048c <__libc_init_array+0x40>)
 800045e:	4c0c      	ldr	r4, [pc, #48]	; (8000490 <__libc_init_array+0x44>)
 8000460:	f000 f818 	bl	8000494 <_init>
 8000464:	1ba4      	subs	r4, r4, r6
 8000466:	10a4      	asrs	r4, r4, #2
 8000468:	2500      	movs	r5, #0
 800046a:	42a5      	cmp	r5, r4
 800046c:	d105      	bne.n	800047a <__libc_init_array+0x2e>
 800046e:	bd70      	pop	{r4, r5, r6, pc}
 8000470:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000474:	4798      	blx	r3
 8000476:	3501      	adds	r5, #1
 8000478:	e7ee      	b.n	8000458 <__libc_init_array+0xc>
 800047a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800047e:	4798      	blx	r3
 8000480:	3501      	adds	r5, #1
 8000482:	e7f2      	b.n	800046a <__libc_init_array+0x1e>
 8000484:	080004ac 	.word	0x080004ac
 8000488:	080004ac 	.word	0x080004ac
 800048c:	080004ac 	.word	0x080004ac
 8000490:	080004b0 	.word	0x080004b0

08000494 <_init>:
 8000494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000496:	bf00      	nop
 8000498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049a:	bc08      	pop	{r3}
 800049c:	469e      	mov	lr, r3
 800049e:	4770      	bx	lr

080004a0 <_fini>:
 80004a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a2:	bf00      	nop
 80004a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004a6:	bc08      	pop	{r3}
 80004a8:	469e      	mov	lr, r3
 80004aa:	4770      	bx	lr
